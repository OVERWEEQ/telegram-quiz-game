import telebot
from telebot import types
from Edit import TOKEN, ADMINS, ID_REPORT_CHAT
import sqlite3
import random
import string
from datetime import datetime
import time

bot = telebot.TeleBot(TOKEN)
global user_id, finded_user_id


# –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('users.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        referral_code TEXT,
        referred_by TEXT,
        referred_count INTEGER,
        balance REAL,
        last_visit_date TEXT,
        answered_questions TEXT
    )
''')

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
conn.commit()
conn.close()

# –°–æ–∑–¥–∞–¥–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
last_message_time = {}

# –§—É–Ω–∫—Ü–∏—è-–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞
def antispam(func):
    def wrapper(message):
        global last_message_time
        user_id = message.from_user.id
        current_time = time.time()
        if user_id in last_message_time:
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if current_time - last_message_time[user_id] < 1:
                return
        func(message)
        last_message_time[user_id] = current_time
    return wrapper

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
def generate_referral_code():
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π 8-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))

def get_random_question(message):
    with open("Questions.txt", "r", encoding="utf-8") as file:
        questions = file.read().split("#")
    questions = [q.strip() for q in questions if q.strip()]

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —É–∂–µ –±—ã–ª–∏ –æ—Ç–≤–µ—á–µ–Ω—ã
    if len(questions) == 0:
        return None, None, None, None

    random_question = random.choice(questions)
    question_parts = random_question.strip().split("\n")
    question_number = question_parts[0].strip()
    question_text = question_parts[1].strip()
    correct_answer = question_parts[2].strip()
    wrong_answers = [answer.strip() for answer in question_parts[3:] if answer.strip()]
    all_answers = [correct_answer] + wrong_answers
    random.shuffle(all_answers)
    return question_number, question_text, all_answers, correct_answer

def get_current_date():
    return datetime.now().strftime('%d.%m.%Y')  # –§–æ—Ä–º–∞—Ç DD.MM.YYYY

def is_admin(user_id):
    return user_id in ADMINS

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
@antispam
def start_handler(message):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    user_id = message.from_user.id
    cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user_data = cursor.fetchone()
    current_date = get_current_date()  # –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    if user_data is None:
        id_report_chat = ID_REPORT_CHAT
        bot.send_message(id_report_chat, f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.chat.username}, id: {message.chat.id}")
        bot.register_next_step_handler(message, report_send_handler);
        referral_code = generate_referral_code()
        referred_by = None
        referred_count = 0
        balance = 0.0
        answered_questions = ""
        cursor.execute(
            'INSERT INTO users (id, referral_code, referred_by, referred_count, balance, last_visit_date, answered_questions) VALUES (?, ?, ?, ?, ?, ?, ?)',
            (user_id, referral_code, referred_by, referred_count, balance, current_date, answered_questions))

    else:
        cursor.execute('UPDATE users SET last_visit_date = ? WHERE id = ?', (current_date, user_id))

    conn.commit()

    markup = types.ReplyKeyboardMarkup(row_width=3)
    itemPlay = types.KeyboardButton('üïπ –ò–≥—Ä–∞—Ç—å')
    itemProfile = types.KeyboardButton('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
    itemReport = types.KeyboardButton('üì¨ –°–æ–æ–±—â–∏—Ç—å')
    itemTop = types.KeyboardButton('üìä –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤')
    markup.add(itemPlay)
    markup.add(itemProfile, itemTop)
    if is_admin(message.from_user.id):
        itemAdmin = types.KeyboardButton('üîí –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞')
        markup.add(itemAdmin, itemReport)
    else:
        markup.add(itemReport)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


def get_total_questions():
    with open("Questions.txt", "r", encoding="utf-8") as file:
        questions = file.read().split("#")
    return len(questions)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üïπ –ò–≥—Ä–∞—Ç—å"
@bot.message_handler(func=lambda message: message.text == 'üïπ –ò–≥—Ä–∞—Ç—å')
@antispam
def play_handler(message):
    global correct_answer, from_user
    from_user = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    total_questions = get_total_questions()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT answered_questions FROM users WHERE id = ?', (message.from_user.id,))
    result = cursor.fetchone()
    if result is None:
        answered_questions = []
    else:
        answered_questions = result[0].split(',') if result[0] else []

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–æ–±—â–∞–µ–º –µ–º—É –æ–± —ç—Ç–æ–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
    if len(answered_questions) == total_questions:
        bot.send_message(message.chat.id, "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! –°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ!")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ –∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ answered_questions –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π

    else:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        question_number, question_text, all_answers, correct_answer = get_random_question(message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω—ã, —Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        if question_number is None:
            bot.send_message(message.chat.id, "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! –°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ!")
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ –∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ answered_questions –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π

        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–≤–µ—Ç–µ–Ω —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
            while str(question_number) in answered_questions:
                # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –æ—Ç–≤–µ—á–µ–Ω, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
                question_number, question_text, all_answers, correct_answer = get_random_question(message)

            random_items = random.sample(all_answers, k=len(all_answers))
            item1 = types.KeyboardButton(random_items[0])
            item2 = types.KeyboardButton(random_items[1])
            item3 = types.KeyboardButton(random_items[2])
            item4 = types.KeyboardButton(random_items[3])
            itemBack = types.KeyboardButton('‚Ü™Ô∏è –ù–∞–∑–∞–¥')
            markup = types.ReplyKeyboardMarkup(row_width=2)
            markup.add(item1, item2)
            markup.add(item3, item4)
            markup.add(itemBack)

            bot.send_message(message.chat.id, question_text, reply_markup=markup)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –≤–æ–ø—Ä–æ—Å–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if str(question_number) not in answered_questions:
                answered_questions.append(str(question_number))
                answered_questions_str = ','.join(answered_questions)
                cursor.execute('UPDATE users SET answered_questions = ? WHERE id = ?', (answered_questions_str, message.from_user.id))
                conn.commit()
        bot.register_next_step_handler(message, check_answer)
    conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_answer(message):
    global correct_answer, from_user
    result = message.text
    if result == correct_answer:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ò–≥—Ä–∞—Ç—å –µ—â–µ" –∏ "–ù–∞–∑–∞–¥"
        markup = types.ReplyKeyboardMarkup(row_width=2)
        markup.add(types.KeyboardButton('üïπ –ò–≥—Ä–∞—Ç—å –µ—â–µ'))
        markup.add(types.KeyboardButton('‚Ü™Ô∏è –ù–∞–∑–∞–¥'))

        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET balance = balance + 2 WHERE id = ?', (from_user,))
        conn.commit()
        conn.close()


        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(message.chat.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úÖ\n" +
                                          "–í—ã –ø–æ–ª—É—á–∏–ª–∏ 2 –æ—á–∫–∞ \n" +
                                          " \n" +
                                          "–•–æ—Ç–∏—Ç–µ –ø–æ–∏–≥—Ä–∞—Ç—å –µ—â–µ?\n", reply_markup=markup)
        bot.register_next_step_handler(message, after_check_answer);
    elif result == "‚Ü™Ô∏è –ù–∞–∑–∞–¥":
        start_handler(message)
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ò–≥—Ä–∞—Ç—å –µ—â–µ" –∏ "–ù–∞–∑–∞–¥"
        markup = types.ReplyKeyboardMarkup(row_width=2)
        markup.add(types.KeyboardButton('üïπ –ò–≥—Ä–∞—Ç—å –µ—â–µ'))
        markup.add(types.KeyboardButton('‚Ü™Ô∏è –ù–∞–∑–∞–¥'))

        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET balance = balance - 1 WHERE id = ?', (from_user,))
        conn.commit()
        conn.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(message.chat.id, f"‚ùóÔ∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ‚ùóÔ∏è\n" +
                   f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n" +
                   f"–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ 1 –æ—á–∫–æ \n" +
                   " \n" +
                   f"–•–æ—Ç–∏—Ç–µ –ø–æ–∏–≥—Ä–∞—Ç—å –µ—â–µ?\n", reply_markup=markup)
        bot.register_next_step_handler(message, after_check_answer);

def after_check_answer(message):
    global correct_answer
    do = message.text
    if do == "üïπ –ò–≥—Ä–∞—Ç—å –µ—â–µ":
        play_handler(message)
    elif do == '‚Ü™Ô∏è –ù–∞–∑–∞–¥':
        start_handler(message)
    else:
        pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîí –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞"
@bot.message_handler(func=lambda message: message.text == 'üîí –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞')
@antispam
def admin_menu_handler(message):
    if message.from_user.id in ADMINS:
        markup = types.ReplyKeyboardMarkup(row_width=2)
        itemStat = types.KeyboardButton('üìÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        itemSend = types.KeyboardButton('üì® –†–∞—Å—Å—ã–ª–∫–∞')
        itemFindUser = types.KeyboardButton('üïµüèª‚Äç‚ôÇÔ∏è –ü—Ä–æ–±–∏—Ç—å —á–µ–ª–æ–≤–µ—á–∫–∞')
        itemChangeData = types.KeyboardButton('‚úçüèª –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ–ª–æ–≤–µ—á–∫–∞')
        itemBack = types.KeyboardButton('‚Ü™Ô∏è –ù–∞–∑–∞–¥')
        markup.add(itemStat, itemSend)
        markup.add(itemFindUser, itemChangeData)
        markup.add(itemBack)
        bot.send_message(message.chat.id, "–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üì® –†–∞—Å—Å—ã–ª–∫–∞"
@bot.message_handler(func=lambda message: message.text == 'üì® –†–∞—Å—Å—ã–ª–∫–∞')
@antispam
def sender_handler(message):
    if message.from_user.id in ADMINS:
        markup = types.ReplyKeyboardMarkup(row_width=1)
        itemBack = types.KeyboardButton('‚Ü™Ô∏è –ù–∞–∑–∞–¥')
        markup.add(itemBack)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –û–Ω–æ —É–ª–µ—Ç–∏—Ç –í–°–ï–ú.", reply_markup=markup)
        bot.register_next_step_handler(message, sender_send_handler);
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")


def sender_send_handler(message):
    rassylka_message = message.text
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id FROM users')
    users = cursor.fetchall()
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for user_id in users:
        try:
            bot.send_message(user_id[0], rassylka_message)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id[0]}: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Å–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—à–µ–¥—à–∏—Ö —Å–µ–≥–æ–¥–Ω—è
def get_users_today():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    current_date = get_current_date()
    cursor.execute('SELECT COUNT(*) FROM users WHERE last_visit_date = ?', (current_date,))
    count = cursor.fetchone()[0]
    conn.close()
    return count

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@bot.message_handler(func=lambda message: message.text == 'üìÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
@antispam
def statistics_handler(message):
    if message.from_user.id in ADMINS:
        users_today = get_users_today()
        bot.send_message(message.chat.id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—à–µ–¥—à–∏—Ö —Å–µ–≥–æ–¥–Ω—è: {users_today}")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üïµüèª‚Äç‚ôÇÔ∏è –ü—Ä–æ–±–∏—Ç—å —á–µ–ª–æ–≤–µ—á–∫–∞"
@bot.message_handler(func=lambda message: message.text == 'üïµüèª‚Äç‚ôÇÔ∏è –ü—Ä–æ–±–∏—Ç—å —á–µ–ª–æ–≤–µ—á–∫–∞')
@antispam
def find_user_handler(message):
    if message.from_user.id in ADMINS:
        markup = types.ReplyKeyboardMarkup(row_width=2)
        itemBack = types.KeyboardButton('‚Ü™Ô∏è –ù–∞–∑–∞–¥')
        markup.add(itemBack)
        bot.send_message(message.chat.id, "–î–∞–π –µ–≥–æ ID –∏ —è —Ç–µ–±–µ —Å–∫–∞–∂—É –∫—Ç–æ –æ–Ω", reply_markup=markup)
        bot.register_next_step_handler(message, finded_user_info_handler);
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")


def finded_user_info_handler(message):
    finded_user_id = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    itemBack = types.KeyboardButton('‚Ü™Ô∏è –ù–∞–∑–∞–¥')
    markup.add(itemBack)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE id = ?', (finded_user_id,))
    user_data = cursor.fetchone()
    if user_data is None:
        if finded_user_id == '‚Ü™Ô∏è –ù–∞–∑–∞–¥':
            pass
        else:
            if not hasattr(message, 'error_message_sent'):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                message.error_message_sent = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
                bot.register_next_step_handler(message, finded_user_info_handler)
    else:
        user_id = user_data[0]
        referral_code = user_data[1]
        referred_by = user_data[2]
        referred_count = user_data[3]
        balance = user_data[4]
        bot.send_message(message.chat.id, f"ID: {user_id}\n" +
                         f"referral code: {referral_code}\n" +
                         f"referred by: {referred_by}\n" +
                         f"referred count: {referred_count}\n" +
                         f"balance: {balance}\n", reply_markup=markup)
    if message.text == '‚Ü™Ô∏è –ù–∞–∑–∞–¥':
        admin_menu_handler(message)
    else:
        if not hasattr(message, 'error_message_sent'):
            message.error_message_sent = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
            bot.register_next_step_handler(message, finded_user_info_handler)

####################################################################


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚úçüèª –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ–ª–æ–≤–µ—á–∫–∞"
@bot.message_handler(func=lambda message: message.text == '‚úçüèª –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ–ª–æ–≤–µ—á–∫–∞')
@antispam
def find_user_for_change_handler(message):
    if message.from_user.id in ADMINS:
        markup = types.ReplyKeyboardMarkup(row_width=2)
        itemBack = types.KeyboardButton('‚Ü™Ô∏è –ù–∞–∑–∞–¥')
        markup.add(itemBack)
        bot.send_message(message.chat.id, "–ù—É–∂–µ–Ω –µ–≥–æ ID", reply_markup=markup)
        bot.register_next_step_handler(message, finded_user_for_change_handler);
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")


def finded_user_for_change_handler(message):
    global finded_user_id
    finded_user_id = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    itemBack = types.KeyboardButton('‚Ü™Ô∏è –ù–∞–∑–∞–¥')
    markup.add(itemBack)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE id = ?', (finded_user_id,))
    user_data = cursor.fetchone()
    if user_data is None:
        if finded_user_id == '‚Ü™Ô∏è –ù–∞–∑–∞–¥':
            pass
        else:
            if not hasattr(message, 'error_message_sent'):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                message.error_message_sent = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
                bot.register_next_step_handler(message, finded_user_for_change_handler)
    else:
        if message.text != '‚Ü™Ô∏è –ù–∞–∑–∞–¥':
            if not hasattr(message, 'error_message_sent'):
                message.error_message_sent = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
                change_what_data_handler(message)
    if message.text == '‚Ü™Ô∏è –ù–∞–∑–∞–¥':
        admin_menu_handler(message)
    else:
        if not hasattr(message, 'error_message_sent'):
            message.error_message_sent = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
            change_what_data_handler(message)

def change_what_data_handler(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    itemChanBal = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
    itemBack = types.KeyboardButton('‚Ü™Ô∏è –ù–∞–∑–∞–¥')
    markup.add(itemChanBal)
    markup.add(itemBack)
    bot.send_message(message.chat.id, "–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup)
    bot.register_next_step_handler(message, change_what_data_transport_handler);

def change_what_data_transport_handler(message):
    transport = message.text;
    if transport == "–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å":
        change_balance_handler(message)
    elif transport == "‚Ü™Ô∏è –ù–∞–∑–∞–¥":
        admin_menu_handler(message)
    else:
        pass


def change_balance_handler(message):
    global finded_user_id
    finded_user_id = finded_user_id
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE id = ?', (finded_user_id,))
    user_data = cursor.fetchone()
    balance = user_data[4]
    markup = types.ReplyKeyboardMarkup(row_width=2)
    itemBack = types.KeyboardButton('‚Ü™Ô∏è –ù–∞–∑–∞–¥')
    markup.add(itemBack)
    bot.send_message(message.chat.id, f"–°–µ–π—á–∞—Å —É –Ω–µ–≥–æ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {balance}, —Å–∫–æ–ª—å–∫–æ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)
    bot.register_next_step_handler(message, change_balance_to_handler);


def change_balance_to_handler(message):
    global finded_user_id
    new_balance = message.text;
    if new_balance == "‚Ü™Ô∏è –ù–∞–∑–∞–¥":
        admin_menu_handler(message)
    else:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute(f'UPDATE users SET balance = {new_balance} WHERE id = ?', (finded_user_id,))
        conn.commit()
        conn.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤–≤–æ–¥–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
        bot.send_message(message.chat.id, "–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!")


#####################################################################

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
@bot.message_handler(func=lambda message: message.text == 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
@antispam
def profile_handler(message):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    user_id = message.from_user.id
    cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user_data = cursor.fetchone()
    referral_code = user_data[1]
    referred_by = user_data[2]
    referred_count = user_data[3]
    balance = user_data[4]

    markup = types.ReplyKeyboardMarkup(row_width=2)


    if referred_by is not None:
        pass
    else:
        itemRefCode = types.KeyboardButton('‚úçüèª –í–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥')
        markup.add(itemRefCode)
    itemBack = types.KeyboardButton('‚Ü™Ô∏è –ù–∞–∑–∞–¥')
    markup.add(itemBack)

    bot.send_message(message.chat.id, "üíº –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å üíº\n" +
                              " \n" +
                              f"üÜî –í–∞—à ID: {message.from_user.id}\n" +
                              f"üîñ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {referral_code}\n" +
                              f"üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥—Ä—É–∑—å—è–º –∏ –ø–æ–ª—É—á–∏—Ç–µ 10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä –∑–∞ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –ø—Ä–∏–º–µ–Ω–∏—Ç –≤–∞—à –∫–æ–¥\n" +
                              f"üë• –ö–æ–ª-–≤–æ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referred_count}\n" +
                              f"üíµ –í–∞—à–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ –æ—á–∫–∏: {balance}", reply_markup=markup)

def get_top_players():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id, balance FROM users ORDER BY balance DESC LIMIT 10')
    top_players = cursor.fetchall()
    conn.close()
    return top_players

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìä –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤"
@bot.message_handler(func=lambda message: message.text == 'üìä –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤')
@antispam
def top_handler(message):
    top_players = get_top_players()
    current_user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¢–æ–ø-10
    current_user_position = None
    for idx, (user_id, _) in enumerate(top_players, 1):
        if user_id == current_user_id:
            current_user_position = idx
            break

    top_message = ("üìå –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã–º –æ—á–∫–∞–º:\n"
                  "\n")
    for idx, (user_id, balance) in enumerate(top_players, 1):
        if user_id == current_user_id:
            top_message += f"{idx} –º–µ—Å—Ç–æ - {balance} –±–∞–ª–ª–æ–≤ (–í—ã)\n"
        else:
            top_message += f"{idx} –º–µ—Å—Ç–æ - {balance} –±–∞–ª–ª–æ–≤\n"

    if current_user_position:
        pass
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –¢–æ–ø-10, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –º–µ—Å—Ç–æ –∏ –±–∞–ª–∞–Ω—Å
        cursor.execute('SELECT balance FROM users WHERE id = ?', (current_user_id,))
        result = cursor.fetchone()
        if result:
            user_balance = result[0]
            top_message += f"\n{current_user_position} –º–µ—Å—Ç–æ - {balance} –±–∞–ª–ª–æ–≤ (–í—ã)"

    bot.send_message(message.chat.id, top_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚úçüèª –í–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥"
@bot.message_handler(func=lambda message: message.text == '‚úçüèª –í–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥')
@antispam
def enter_referral_code_handler(message):
    markup = types.ReplyKeyboardMarkup(row_width=1)
    itemBack = types.KeyboardButton('‚Ü™Ô∏è –ù–∞–∑–∞–¥')
    markup.add(itemBack)
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞, —á—Ç–æ–±—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–ª—É—á–∏—Ç—å 10 —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã—Ö –æ—á–∫–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, referral_code_handler);

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞"
def referral_code_handler(message):
    referral_code = message.text;
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE referral_code = ?', (referral_code,))
    referred_user_data = cursor.fetchone()
    if referred_user_data is None:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Ç–∞–∫–æ–≥–æ –∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤–≤–µ–ª —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        user_id = message.from_user.id
        referred_by = referred_user_data[0]
        cursor.execute('UPDATE users SET referred_by = ? WHERE id = ?', (referred_by, user_id))
        cursor.execute('UPDATE users SET referred_count = referred_count + 1 WHERE id = ?', (user_id,))
        cursor.execute('UPDATE users SET balance = balance + 10 WHERE id = ?', (user_id,))
        cursor.execute('UPDATE users SET balance = balance + 10 WHERE id = ?', (referred_by,))
        conn.commit()
        conn.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤–≤–æ–¥–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
        bot.send_message(message.chat.id, "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–ª—å–∑–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã—Ö –æ—á–∫–æ–≤!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üì¨ –°–æ–æ–±—â–∏—Ç—å"
@bot.message_handler(func=lambda message: message.text == 'üì¨ –°–æ–æ–±—â–∏—Ç—å')
@antispam
def report_handler(message):
    # –í–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ "üì¨ –°–æ–æ–±—â–∏—Ç—å"
    markup = types.ReplyKeyboardMarkup(row_width=1)
    itemBack = types.KeyboardButton('‚Ü™Ô∏è –ù–∞–∑–∞–¥')
    markup.add(itemBack)
    bot.send_message(message.chat.id, "–ï—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –±–∞–≥ –∏–ª–∏ –æ—à–∏–±–∫—É, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º –∑–¥–µ—Å—å.\n" +
                                      "–í—Å—ë, —á—Ç–æ –≤—ã –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –¥–æ—ë–¥–µ—Ç –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.", reply_markup=markup)
    bot.register_next_step_handler(message, report_send_handler);
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞"
def report_send_handler(message):
    id_report_chat = -1001914206356
    if message.text == '‚Ü™Ô∏è –ù–∞–∑–∞–¥':
        start_handler(message)
    else:
        bot.send_message(id_report_chat, f"–†–µ–ø–æ—Ä—Ç –æ—Ç @{message.chat.username}, id: {message.chat.id}: {message.text}")
        bot.register_next_step_handler(message, report_send_handler);

@bot.message_handler(func=lambda message: message.text == '‚Ü™Ô∏è –ù–∞–∑–∞–¥')
@antispam
def back_handler(message):
    start_handler(message)
bot.polling(none_stop=True)
